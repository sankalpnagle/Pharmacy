// Prisma schema for Pharmacy E-commerce Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DOCTOR
  PHARMACY_STAFF
  ADMIN
}

enum OrderStatus {
  PLACED
  PAID
  FULFILLED
  MISSING_PRESCRIPTION
  REFUND
  REJECT
  CANCEL
}

enum Availability {
  IN_STOCK
  OUT_OF_STOCK
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUND
}

enum PaymentMethod {
  STRIPE
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  emailVerified     DateTime?
  phone             String?
  password          String?
  role              Role      @default(USER)
  doctorLicenseUrl  String?
  doctorExtraFields Json?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  patients           Patient[]
  deliveryAddress   DeliveryAddress? @relation("UserAddress")
  orders             Order[]
  notifications      Notification[]
  orderStatusChanges OrderStatusChange[]
  accounts           Account[]

  Product Product[]
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email,token])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Patient {
  id        String    @id @default(uuid())
  doctorId  String
  email     String?
  name      String
  phone     String?
  birthDate DateTime?
  createdAt DateTime  @default(now())

  doctor          User              @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  orders          Order[]
  deliveryAddress DeliveryAddress? @relation("PatientAddress")
}

model DeliveryAddress {
  id                 String  @id @default(uuid())
  userId             String? @unique
  patientId          String? @unique
  addressLine        String
  town               String
  municipality       String
  province           String
  country            String  @default("Cuba")
  manualInstructions String?

  user    User?    @relation("UserAddress", fields: [userId], references: [id])
  patient Patient? @relation("PatientAddress", fields: [patientId], references: [id])

  Order Order[]
}

model Category {
  id        String     @id @default(uuid())
  name      String
  parentId  String?
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("CategoryParent")
  products  Product[]

  @@unique([name, parentId])
}



model Product {
  id                   String       @id @default(uuid())
  name                 String
  description          String?
  price                Decimal      @db.Decimal(10, 2)
  weight               Decimal      @db.Decimal(10, 2)
  availability         Availability
  requiresPrescription Boolean      @default(false)
  details              String?
  categoryId           String?
  imageUrl             String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  medicineCode         String?      @unique
  pharmacyStaffId      String?
  pharmacyStaff        User?        @relation(fields: [pharmacyStaffId], references: [id], onDelete: SetNull)

  category   Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]
  deletedAt  DateTime?
}

model Order {
  id                String      @id @default(uuid())
  orderNumber       BigInt      @unique @default(autoincrement())
  userId            String
  patientId         String?
  status            OrderStatus @default(PLACED)
  deliveryPrice     Decimal?    @db.Decimal(10, 2)
  totalPrice        Decimal     @db.Decimal(10, 2)
  deliveryAddressId String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  patient         Patient?            @relation(fields: [patientId], references: [id], onDelete: SetNull)
  deliveryAddress DeliveryAddress     @relation(fields: [deliveryAddressId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]
  orderCode       OrderCode?
  prescription    Prescription?
  payment         Payment?
  statusChanges   OrderStatusChange[]
  notifications   Notification[]
}

model OrderCode {
  id        String    @id @default(uuid())
  orderId   String    @unique
  code      String    @unique
  expiresAt DateTime?

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id             String   @id @default(uuid())
  orderId        String
  productId      String?  // nullable
  quantity       Int
  price          Decimal  @db.Decimal(10, 2)
  productDetails Json     // snapshot of product

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
}

model Prescription {
  id                   String   @id @default(uuid())
  orderId              String   @unique
  prescriptionImageUrl String
  uploadedAt           DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String        @id @default(uuid())
  orderId         String        @unique
  payerName       String?
  payerEmail      String?
  amount          Decimal       @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(PENDING)
  transactionId   String?       @unique
  paymentMethod   PaymentMethod
  paymentIntentId String?       @unique
  clientSecret    String?
  createdAt       DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Notification {
  id               String           @id @default(uuid())
  userId           String
  orderId          String?
  notificationType NotificationType
  destination      String
  message          String
  createdAt        DateTime         @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderStatusChange {
  id         String      @id @default(uuid())
  changeById String
  orderId    String
  comment    String?
  action     OrderStatus
  actionDate DateTime    @default(now())

  changedBy User  @relation(fields: [changeById], references: [id], onDelete: Cascade)
  order     Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
